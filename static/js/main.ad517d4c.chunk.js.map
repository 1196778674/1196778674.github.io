{"version":3,"sources":["assets/images/logo.jpeg","layout/index.tsx","views/404.tsx","views/home.tsx","views/pages/redux/child1.tsx","views/pages/redux/com2.tsx","views/pages/redux/file.tsx","store/actionTypes/index.ts","store/reducers/test.ts","store/reducers/index.ts","store/index.ts","views/pages/redux/redux.tsx","store/actions/index.ts","views/pages/typesTpl/index.tsx","views/pages/webwork/index.tsx","views/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Layout","Content","Sider","Title","Typography","ContentStyle","styled","LayoutStyle","SiderStyle","ContentBody","HeaderStyle","LogoStyle","img","TitleStyle","Index","children","id","src","Logo","alt","level","width","mode","defaultOpenKeys","style","height","Item","to","notFound","home","connect","state","count","test","Paragraph","Text","Container","div","TextLink","File","strong","mark","underline","onClick","window","open","ADD","JIAN","ASYNCADD","initState","action","type","payload","Number","combineReducers","store","createStore","reducers","applyMiddleware","thunk","dispatch","add","number","jian","asyncAdd","Promise","resolve","reject","setTimeout","then","res","adds","useCallback","jians","asyncAddFun","TypesTpl","code","WebWork","APP","path","component","redux","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.ad517d4c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.62258a1e.jpeg\";","import React, {FC} from 'react';\nimport { Layout, Menu, Typography } from 'antd'\nimport styled from 'styled-components';\n// import { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport Logo from \"../assets/images/logo.jpeg\";\nimport { Link } from 'react-router-dom'\n\nconst { Header, Content, Sider } = Layout;\n// const { SubMenu } = Menu;\nconst { Title } = Typography\n\nexport const ContentStyle = styled(Content)`\n    padding: 0 50px;\n    height: 100%;\n`;\nconst LayoutStyle = styled(Layout)`\n    background: #fafafa;\n    height: 100%;\n`;\nconst SiderStyle = styled(Sider)`\n    background: #fafafa;\n`;\nconst ContentBody = styled(Content)`\n    padding: 20px;\n    min-height: calc(100% - 200px);\n    overflow-y: scroll;\n`;\nconst HeaderStyle = styled(Header)`\n    border-bottom: 1px solid #fafafa;\n    vertical-align: inherit;\n`;\nconst LogoStyle = styled.img`\n    width: 45px;\n    height: 45px;\n`;\nconst TitleStyle = styled(Title)`\n    display: initial;\n    margin-left: 20px;\n`;\n\n\n\nconst Index: FC  = ({children}) => {\n    return (\n        <Layout id=\"layout\">\n            {/* 头部导航 */}\n            <HeaderStyle>\n                <LogoStyle src={Logo} alt={'logo'}/>\n                <TitleStyle level={3}>欢迎来到小灰灰的博客！</TitleStyle>\n            </HeaderStyle>\n            {/* 主体 */}\n            <ContentStyle>\n                <LayoutStyle>\n                    <SiderStyle width={200}>\n                    <Menu\n                        mode=\"inline\"\n                        // defaultSelectedKeys={[]}\n                        defaultOpenKeys={['sub1']}\n                        style={{ height: '100%' }}\n                    >\n                        {/* <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"subnav 1\">\n                        <Menu.Item key=\"1\">option1</Menu.Item>\n                        <Menu.Item key=\"2\">option2</Menu.Item>\n                        <Menu.Item key=\"3\">option3</Menu.Item>\n                        <Menu.Item key=\"4\">option4</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"subnav 2\">\n                        <Menu.Item key=\"5\">option5</Menu.Item>\n                        <Menu.Item key=\"6\">option6</Menu.Item>\n                        <Menu.Item key=\"7\">option7</Menu.Item>\n                        <Menu.Item key=\"8\">option8</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n                        <Menu.Item key=\"9\">option9</Menu.Item>\n                        <Menu.Item key=\"10\">option10</Menu.Item>\n                        <Menu.Item key=\"11\">option11</Menu.Item>\n                        <Menu.Item key=\"12\">option12</Menu.Item>\n                        </SubMenu> */}\n                        <Menu.Item key=\"1\">\n                            <Link to='/redux'>react配置redux</Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Link to='/typescripts'>TS注意点总结</Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Link to='/webwork'>webWork解析Blob</Link>\n                        </Menu.Item>\n                    </Menu>   \n                    </SiderStyle>\n                    <ContentBody>{children}</ContentBody>\n                </LayoutStyle>\n            </ContentStyle>\n        </Layout>\n    )\n}\n\nexport default Index","import React from 'react';\n\nconst notFound = () => {\n    return (\n        <>\n            页面丢了~~~\n        </>\n    )\n}\n\nexport default notFound ","import React, {FC} from 'react';\n\nconst home: FC = () => {\n    return (\n        <>\n            欢迎来到小灰灰的博客主页！\n        </>\n    )\n}\n\nexport default home","import React, {FC} from 'react';\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = (state: any) => {\n    const { test } = state\n    return {\n        count: test.count\n    }\n}\n\ninterface IProps {\n    count: number\n}\n\nconst Com1: FC<IProps> = ({count}) => {\n    return (\n        <div>\n            子组件1：{count}\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, {})(Com1);","import React, {FC} from 'react';\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = (state: any) => {\n    const { test } = state\n    return {\n        count: test.count\n    }\n}\n\ninterface IProps {\n    count: number\n}\n\nconst Com2: FC<IProps> = ({count}) => {\n    return (\n        <div>\n            子组件2：{count}\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, {})(Com2);","import React from 'react';\nimport styled from 'styled-components';\nimport { Typography, Divider } from 'antd';\n\nconst { Title, Paragraph, Text } = Typography;\n\nexport const Container = styled.div`\n  width: 100%;\n  margin: 20px 0px;\n`;\nexport const TextLink = styled(Text)`\n  cursor: pointer;\n  color: #1890ff;\n`;\n\n\nconst File: React.FC = () => {\n\n    const toOther = () => {\n        window.open('http://cn.redux.js.org/docs/basics/ExampleTodoList.html', '_blank')\n    }\n\n    return (\n        <Container>\n            <Title level={3}>react-redux和redux-thunk使用</Title>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>为什么要使用Redux?</Text>\n                </Paragraph>\n                <Text>当我们使用react或者vue等一些前端框架时候，随着我们项目的不断增大，导致我们对state的管理也会慢慢增多，可能会对我们造成<Text strong mark> state 在什么时候，由于什么原因，如何变化已然不受控制</Text>， 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。这时候就需要一个状态管理器来帮我们解决这个问题。</Text>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>使用Redux要遵循三大原则</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text strong>单一数据源：</Text>\n                    <Text>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree <Text mark>只存在于唯一一个 store 中</Text>。</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text strong>State 是只读的：</Text>\n                    <Text><Text mark>唯一改变 state 的方法就是触发 action</Text>，action 是一个用于描述已发生事件的普通对象。</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text strong>使用纯函数(Reducer)来执行修改：</Text>\n                    <Text>为了描述 action 如何改变 state tree ，你需要<Text mark>编写reducers</Text>。</Text>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>redux-thunk的作用</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text strong>用作异步：</Text>\n                    <Text>redux-thunk 是一个比较流行的 <Text mark>redux 异步 action 中间件</Text>，比如 action 中有通用远程 API 这些场景，那么久应该使用 redux-thunk 了。redux-thunk 帮助你统一了异步和同步 action 的调用方式，把异步过程放在 action 级别解决，对 component 没有影响。</Text>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Text>详情参考: <TextLink underline onClick={toOther}>react-redux官网文档</TextLink></Text>\n            </Paragraph>\n        </Container>\n    )\n}\n\nexport default File","export const ADD = 'ADD'\nexport const JIAN = 'JIAN'\nexport const ASYNCADD = 'ASYNCADD'","\nimport { ADD, JIAN, ASYNCADD } from '../actionTypes'\n\n// states\nexport const initState = {\n    count: 1\n}\n\ninterface IAction {\n    type: string\n    payload: number | string\n}\n\nconst test = (state = initState, action: IAction) => {\n    const { type, payload } = action\n    switch (type){\n        case ADD:\n            return {\n                count:state.count+Number(payload)\n            }\n        case JIAN:\n            return {\n                count:state.count-Number(payload)\n            }\n        case ASYNCADD:\n            return {\n                count:state.count+Number(payload)\n            }\n        default :\n        return state \n    }\n}\n\nexport default test","import { combineReducers } from 'redux'\nimport test from './test'\n\nexport default combineReducers({\n    test\n})","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducers from './reducers'\n\n// store\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store","import React, { useCallback } from 'react';\nimport { connect } from 'react-redux'\nimport { Button, Typography, Space } from 'antd';\nimport styled from 'styled-components';\nimport Com1 from './child1'\nimport Com2 from './com2'\nimport File from './file'\nimport { add, jian, asyncAdd } from '../../../store/actions';\n\nconst { Title } = Typography;\n\nexport const TitleStyle = styled.div`\n  \n`;\n\n\nconst mapStateToProps = (state: any) => ({})\n\nconst mapDispatchToProps = (dispatch: Function) => ({\n    add: (number: number) => add(number),\n    jian: (number: number) => jian(number),\n    asyncAdd: () => asyncAdd()\n})\n\ninterface IProps {\n    count: number\n    add: Function\n    jian: Function\n    asyncAdd: Function\n}\n\n\nconst Redux: React.FC<IProps> = ({ add ,jian, asyncAdd}) => {\n    const adds = useCallback(() => {\n        add(1)\n    },[add])\n    const jians = useCallback(() => {\n        jian(2)\n    },[jian])\n    const asyncAddFun = useCallback(() => {\n        asyncAdd()\n    }, [asyncAdd])\n\n    return (\n        <>\n            <File/>\n            <Title level={3}>这是一个Dome</Title>\n            <Com1/>\n            <Com2/>\n            <Space>\n                <Button onClick={adds}>同步加1</Button>\n                <Button onClick={jians}>同步减2</Button>\n                <Button onClick={asyncAddFun}>异步加3(1s后)</Button>\n            </Space>\n        </>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Redux)","import store from '../index'\nimport { ADD, JIAN, ASYNCADD } from '../actionTypes'\n\n// actions\nexport const add = (number: number) => {\n    store.dispatch({type: ADD, payload: number})\n}\nexport const jian = (number: number) => {\n    store.dispatch({type: JIAN, payload: number})\n}\nexport const asyncAdd = () => {\n    // 异步\n    const asyncFun = new Promise<number>((resolve, reject) => {\n        setTimeout(() => {\n            resolve(3)\n        }, 1000);\n    })\n    asyncFun.then(res => {\n        store.dispatch({type: ASYNCADD, payload: res})\n    })\n}\n","import React from 'react';\nimport { Typography, Divider } from 'antd';\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst TypesTpl: React.FC = () => {\n    return (\n        <>\n           <Title level={3}>TS一些需要注意点</Title>\n           <Paragraph>\n                <Paragraph>\n                    <Text strong>首先我们要知道什么是typescript：</Text>\n                </Paragraph>\n                <Text>简单来说：TypeScript是JavaScript的超集，具有类型系统，支持ES6语法，支持面向对象编程的概念，如<Text mark>类、接口、继承、泛型</Text>等，它可以编译成普通的JavaScript代码。 以下简称TS</Text>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>为什么要用TS呢？</Text>\n                </Paragraph>\n                <Text>那当然是因为TS支持ES6，且支持接口、泛型等规范、编译报错提示等，可使我们的代码更加规范且不会引发奇怪bug；</Text>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>TS有那些类型呢？</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>数字类型： let n: <Text mark>number</Text> = 1</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>字符串类型：let s: <Text mark>string</Text> = \"hello xiaohuihui\"</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>布尔类型：  let b: <Text mark>boolean</Text> = true/false</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>数组类型：  let arr: <Text>number[]</Text> = [1,2,3,4]</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>元组类型：  let x: <Text mark>[string, number]</Text>; x = ['hello', 10];</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>枚举类型：  enum name [Object]</Text>\n                </Paragraph>\n                <Paragraph code>\n                    <Text>对象：object，用不存在的值：never，函数无返回值：void，还有null,undefined,any;</Text>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>TS中一个比较重要且常用的东西：接口(interface)</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Paragraph>\n                        <Text strong>什么是接口，它有那些特性呢？</Text>\n                    </Paragraph>\n                    <Text>TS的核心原则之一就是对值所具有的结构进行类型检查，它有时被称为<Text mark>“鸭式辩型法”或“结构性子类型化”</Text>。</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Paragraph>\n                        <Text strong>特性：</Text>\n                    </Paragraph>\n                    <Paragraph>\n                        <Text>1：定义对象、数组、函数、类等。</Text>\n                    </Paragraph>\n                    <Paragraph>\n                        <Text>2：接口可以相互继承</Text>\n                    </Paragraph>\n                    <Paragraph>\n                        <Text> 3：接口可以继承类</Text>\n                    </Paragraph>\n                    <Paragraph>\n                        <Text> 4：可选属性与额外检查</Text>\n                    </Paragraph>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>TS中的类型别名type和接口interface有什么异同点？</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Paragraph>\n                        <Text strong>相同点：</Text>\n                    </Paragraph>\n                    <Text>type和interface都可以作用于原始值，联合类型，元组等任何类型；</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Paragraph>\n                        <Text strong>差异点：</Text>\n                    </Paragraph>\n                    <Paragraph>\n                        <Text>type不能extends和implements；</Text>\n                    </Paragraph>\n                    <Paragraph>\n                        <Text>type拓展使用 & [Object]  例如：type name1 = name & [Object]</Text>\n                    </Paragraph>\n                </Paragraph>\n                \n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>TS中的Declare关键字用来做什么？</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>我们平时引用第三方插件时候，一般第三方插件会有ts版本的支持，我们只需要安装ts版本的用来即可使用，但是有的并没有提供ts版本的支持(即没有提供xx.d.ts)，那我们怎么处理呢？这就用到了declare，例如：declare module 'cytoscape-klay';</Text>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>TS中的泛型是什么，可以做什么？</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>泛型代表的是泛指某一类型，更像是一个类型变量，以下是泛型的几种用法(场景不是很全):</Text>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>下面是在实际工作中用的一些注意点：</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>1、在大多数不确定类型的场景下，用unknown替代any；</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>2、当方法没有返回时候，用void可以避免空指针导致的错误；</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>3、??运算符：??与||的功能是相似的，区别是??在左侧表达式结果为 null 或者 undefined 时，才会返回右侧表达式 。</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>4、当方法中定义的参数没有使用时候，可以使用前下划线标识，例如：_item；</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>5、typeof: 可以用来获取一个<Text mark>变量</Text>或<Text mark>对象的类型</Text>；</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>6、泛型工具方法：</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>- Partical: 可以使泛型中的所有类型变为可选;</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>- Pick: 将 T 类型中的 K 键列表提取出来，生成新的子键值对类型。</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>- Omit: 将 T 中包含 K (键)属性剔除。</Text>\n                </Paragraph>\n                <Paragraph>\n                    <Text>- Exclude: 将 T 中包含 U 的属性剔除，返回其余部分</Text>\n                </Paragraph>\n            </Paragraph>\n            <Divider/>\n        </>\n    )\n}\n\nexport default TypesTpl","import React, { FC } from 'react';\nimport { Typography, Divider } from 'antd';\nimport styled from 'styled-components';\n\nconst { Title, Paragraph, Text } = Typography;\n\nexport const TextLink = styled(Text)`\n  cursor: pointer;\n  color: #1890ff;\n`;\n\n\n\nconst WebWork: FC = () => {\n    const goDeital = () => {\n        window.open('https://www.jianshu.com/p/6c2ffbfe6003', '_blank')\n    }\n    return (\n        <>\n            <Title level={3}>web Worker子线程解析Blob数据</Title>\n            <Paragraph>\n                <Paragraph>\n                    <Text strong>首先我们要了解什么是Blob数据</Text>\n                </Paragraph>\n                <Text>Blob(Binary long Object)是二进制长对象的意思，Blob通常用于存储大文件，典型的Blob内容是一张图片或者一个声音文件，由于他们的特殊性，必须使用特殊的方式来存储。使用Blob列可以把照片声音等文件的二进制数据保存在数据库里，并可以从数据库里恢复指定文件。</Text>\n            </Paragraph>\n            <Divider/>\n            <Paragraph>\n                具体处理方法: <TextLink onClick={goDeital}>web Worker子线程解析Blob数据</TextLink>\n            </Paragraph>\n            \n        </>\n    )\n}\n\nexport default WebWork;","import React, {FC} from 'react';\nimport Layout from \"../layout/index\";\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport notFound from './404'\nimport home from './home'\nimport redux from './pages/redux/redux'\nimport TypesTpl from './pages/typesTpl';\nimport WebWork from './pages/webwork';\n\nconst APP: FC = () => {\n  return (\n    <Layout>\n        <Switch>\n          <Route path=\"/home\" component={home}/>\n          <Route path=\"/redux\" component={redux}/>\n          <Route path=\"/typescripts\" component={TypesTpl}/>\n          <Route path=\"/webwork\" component={WebWork}/>\n          <Redirect to=\"/home\"/>\n          <Route path=\"*\" component={notFound}/>\n        </Switch>\n    </Layout> \n  )\n}\n\nexport default APP","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.less'\nimport {createGlobalStyle} from 'styled-components';\nimport { BrowserRouter } from 'react-router-dom'\nimport {Provider} from \"react-redux\";\nimport store from './store'\n\nexport const GlobalStyle = createGlobalStyle`\n  #root{\n    height: 100%;\n    #layout{\n      height: 100%;\n    }\n  }\n`;\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle/>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}